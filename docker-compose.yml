# version: '3.8'

# services:
#   frontend:
#     build:
#       context: ./frontend
#     ports:
#       - "3000:5173"  # Mappe le port 5173 du conteneur au port 3000 de l'hôte
#     environment:
#       - CHOKIDAR_USEPOLLING=true


#   backend:
#     build:
#       context: ./backend
#     ports:
#       - "5000:5000"
#     environment:
#       - FLASK_ENV=development
#     volumes:
#       - ./backend:/app  


version: "3.8"

services:
  # Service pour la base de données MySQL
  db:
    image: mysql:5.7
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: tododb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network

  # Service pour PHPMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: rootpassword
    depends_on:
      - db
    networks:
      - app-network

  # Service pour le backend Flask
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    environment:
      FLASK_ENV: development
      MYSQL_HOST: db
      MYSQL_DATABASE: tododb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
    depends_on:
      - db
    networks:
      - app-network

  # Service pour le frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - backend
    networks:
      - app-network

  # Service pour le reverse proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network: